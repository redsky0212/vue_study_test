** Vue.js  (인프런, 누구나 다루기 쉬운 Vue.js 프론트 개발)

* 인스턴스 생성
  var app = new Vue({
      el : '#app_id'
      ,data : {
          message : '시작하기!!'
      }
  });


* 라이프싸이클 
 - 데이터 관찰
 - 템플릿 컴파일
 - DOM에 객체연결
 - 데이터 변경시 DOM 업데이트

* 라이프싸이클 코딩
    var app = new Vue({
        el:'#app'
        ,data: {
            message: '시작하기!'
        }
        ,beforeCreate: function(){
            console.log('beforeCreate');
        }
        ,created: function(){
            console.log('created');
        }
        ,mounted: function(){
            console.log('mounted');
            this.message = '변경!!!'
        }
        ,updated: function(){
            console.log('updated');
        }
    });

* 컴포넌트 등록 간단 실습
  <my-component></my-component> // html에 컴포넌트 이름으로 추가.

  Vue.component('my-component', {
    template: '<div>custom component test!!!</div>'
  });


* (전역, 지역) 컴포넌트 등록 방법
  - 전역등록방법------------------------
    Vue.component('my-component', {
        template: '<div>custom component test!!!</div>'
    });
  - 지역등록방법------------------------
   // 옵션에 'components'로 등록.
    new Vue({
        components:{
            'my-cmp' : {
                data: function(){ return {}; }
                ,template: '<div>custom local component test!!!</div>'
                ,methods:{}
            }
        }
    });

* (전역,지역) 컴포넌트의 차이점
 - local component는 해당 vue인스턴스 내에서만 사용할 수 있다.


* 상,하위 컴포넌트간 데이터 전달 방식 (parent - child)
 - 부모 -> 자식 : props down
 - 자식 -> 부모 : events up
 
* Props 이해
 - 상위에서 하위로 값 전달.
 - 각 컴포넌트 간 값을 직접참조를 못하고 props로만 전달 가능.
 - 상위에서 태그에 속성으로 v-bind:케밥기법props명('-'가 들어간 형태)="상위data의 값"
 - 하위 컴포넌트에서는 카멜기법으로 props명을 받아야함 props:[카멜기법props명]

    <my-component v-bind:passed-data="message"></my-component>
    app = new Vue({
        el:'#app'
        ,data: { message: '시작하기!' }
    });
    // 전역 콤포넌트
    Vue.component('my-component', {
        props: ['passedData']
        ,template: '<div>{{passedData}}</div>'
    });

* 같은 레벨의 컴포넌트 간 통신
 - 직접적인 참조가 불가능 하다.
 - 자식 -> 부모 -> 다시 2개의 자식

* Event Bus - 컴포넌트 간 통신
 - 컴포넌트끼리 관계가 없더라도 서로 통신이 가능하게 하는 방식.
 - 기본코드
   var EventBus = new Vue();                    // 이벤트 생성
   EventBus.$emit('message', '헬로우 Vue!');    // 이벤트 발행
   EventBus.$on('message', function(txt){       // 이벤트 구독
       console.log(txt);
   });

* Component실습 (component생성, porps사용, for사용)
 - todo-list 컴포넌트를 만들고 todo데이터리스트를 넘겨받는다.
 - for문을 이용하여 리스트렌더링을 한다.
 - for문을 사용할시 데이터에 고유한key값을 가지고 있는게 좋고 for문 돌때 v-bind:key= 속성을 넣어서 
    성능 향상을 해주는게 좋다.

* Vue 라우터 소개
 - npm install vue-router --save 설치 또는 <script src="/path/vue-router.js"></script> 포함.(ES2015기준이 아닐경우에는 소스에 script태그로 포함해야한다.)
 - 라우터에서 모듈시스템과 함께 사용하려면 명시적으로 Vue.use(); 로 라우터를 등록해야한다. (https://router.vuejs.org/installation.html#direct-download-cdn)
 - 라우터 구조 :  rootUrl/#/라우터네임 
 - 라우터의 '#'을 제외하고싶으면 아래와 같이 mode값에 'history'를 추가하면 된다.
   const router = new VueRouter({ routes, mode:'history' });
 
* Nested 라우터
  - 부모 - 자식 간의 컴포넌트를 동시에 렌더링.
  - router에 children으로 컴포넌트를 등록하면된다. 
    소스코드 참조 url http://github.com/joshua1988/LearnVuejs/tree/master/samples/6_nested-router

* template 시 주의사항
  - 최상위 템플릿 Element는 무조건 하나만 있어야 한다.


* Nested Router 실습


* Named Views - todo 스터디필요
  - Nested router는 현재 뷰의 자식으로 컴포넌트를 넣는방식.
  - Named Views는 하나의router url에 여러개의 뷰를 뿌려주는 형식.


* Vue 로 http통신하기 - todo 스터디필요
 - 플러그인 npm install vue-resource --save (ES2015 이전방식은 cdn으로 script로 넣어야함.) 
 - axios를 많이 사용함(https://github.com/axios/axios).


* Vue template - todo 스터디필요
  - Virtual DOM 을 사용하여 Browser의 부담을 줄여준다.
  - 원한다면 render function을 직접 구현하여 사용할 수 있다.
  - 참고링크 추가
    React 와 Vue 성능 비교 : https://vuejs.org/v2/guide/comparison.html#Performance
    DOM 이란? https://developer.mozilla.org/ko/docs/Gecko_DOM_Reference/%EC%86%8C%EA%B0%9C
    Render function : https://vuejs.org/v2/guide/render-function.html

* Template 속성(Attributes) - todo 스터디필요
  - v-bind 와 같이 html속성과 결합하여 적용할 수 있다.

* Javascript Expressions사용  - todo 스터디필요
  - {{}}  javascript표현식도 허용은 하나 지양한다.

* Directives :  - todo 스터디필요
  - v- 접두사를 붙인 속성으로 표현

* Filter :  - todo 스터디필요
 - 화면에 표시되는 텍스트의 형식을 편하게 다양하게 바꿀 수 있도록 고안된 기능
 - '|' 를 이용하여 뒤쪽에 넣을 수 있음. 
    ex) {{message | capitalize}} 

    new Vue({
        Filters : {
            capicalize : function(value){
                // 들어온 value를 원하는 로직을 지나 return시킬 수 있음.
            }
        }
    }); 


* Vue 데이터 바인딩
 - 크게 3가지 방법이 있음.
    Interpolation
    Binding Expressions
    Directives


* Interpolation 데이터 바인딩
 - {{}} 으로 데이터를 바인딩 하는 기법.


* Binding Expressions 데이터바인딩
 - {{}} 안에 javascript 표현식을 사용할 수 있다.
   <div>{{number + 1}}</div>
   <div>{{message.split('').reverse().join('')}}</div>
 - {{}} 안에 Vue의 Filter를 사용할 수 있다.
   {{message | capitalize}}
   {{message | capitalize | upcapicalize}}


* Directives 데이터 바인딩
 - v-접두사를 이용하여 attribute에 바인딩 할 수 있음.
   <p v-if="login">Hello</p>
   <a v-on:click="doSomething">


* class 바인딩 방법
 - class="{{ className }}" , v-bind:class 이런 방법으로 적용할 수 있다.
 - 기존 class에 또다른 class를 넣을 수 있다. 클리스문법은 '{}'를 사용.
   <div class="static" v-bind:class="{'class-a':isA, 'class-b': isB}"></div>
   <script>
    data:{
        isA:true,
        isB:false
    }
   </script>
   -> 결과값은 <div class="static class-a"></div>

 - array구문도 사용할 수 있다.
   <div v-bind:class="[classA, classB]"></div>
   <script>
    data : {
        classA : 'class-a',
        classB : 'class-b'
    }
   </script>


* Template & DataBinding 실습


* 싱글파일 Component (.vue) 와 JSX
 - .vue파일을 브라우져가 렌더링 할 수있는 파일로 변환 하려면 webpack의 vue-loader
    또는 browserify 가 필요.
 - ES5만 사용하는 경우 single file component의 혜택을 볼 수 없음.


* vue-cli를 이용한 프로젝트 구성.(webpack-simple로 해보기)(pc에서 순서대로 프로젝트를 구성해야함.)
  - node.js 설치 npm 자동따라옴.
  - vue-cli설치 npm intall -global vue-cli

  - (테스트를 위하여 webpack, webpack-simple 두가지를 설치해본다.)
  - vue의 webpack-simple을 설치한다.
    설치하고자 하는 폴더에서 하거나 아니면 vue init webpack-simple 폴더명 과같이 설치. (현재폴더위치가 같으면 폴더명은 패스)
    다음으로 npm install 해서 node_modules에 해당 모듈들 다 설치한다.(webpack설치하면 package.json에 명시되지만 npm install을 해줘야 의존성이 걸려있는 라이브러리가 설치가 됨)
    다음으로 npm run dev 해서 띄워본다. webpack의 dev서버를 이용하여 띄움.

  - vue의 webpack을 설치 한다.
    vue init webpack 폴더명 과 같이 설치. (현재폴더위치가 같으면 폴더명은 패스) 
    다음으로 npm install 해서 node_modules에 해당 모듈들 다 설치한다.(webpack설치하면 package.json에 명시되지만 npm install을 해줘야 의존성이 걸려있는 라이브러리가 설치가 됨)
    다음으로 npm run dev 해서 띄워본다. webpack의 dev서버를 이용하여 띄움.

  - 결론
    webpack으로 프로젝트 구성은 실제프로젝트에서 사용하면 될듯하고
    webpack-simple로 프로젝트 구성은 테스트서버나 간단한 서버로 사용할때 사용.

* vue-cli프로젝트 싱글파일컴포넌트 이용한 컴포넌트(전역,지역)등록
  - webpack-simple로 프로젝트를 구성한다.
  - 프로젝트의 src폴더에는 기본 App.vue와 main.js파일이 있다.
  - main.js파일에 새로운 NavHeader라는 전역 컴포넌트를 등록한다.
    import NavHeader from './components/NavHeader.vue';
    Vue.component('nav-header', NavHeader);
    // ES5기준으로는
    var NavHeader = require('./components/NavHeader.vue');
  - App.vue파일에 등록한 NavHeader컴포넌트를 사용하는 태그를 입력한다.
    <nav-header></nav-header>
  - NavHeader.vue파일을 해당폴더 밑에 만들고 코딩.
  - 지역컴포넌트 등록을 위한 LoginForm.vue를 만들고 코딩.(예제페이지 참조)


* Vue Loader 소개(webpack에 대해 스터디 필요)
  - webpack의 loader중의 Vue Loader (.vue파일을 웹페이지에서 보여지게끔 뿌려주는 기능)